Problem Statement
You wish to help Ashish, who possesses a collection of N strings, some of which may be duplicated, and has been assigned the task of finding the kth unique string.

If the number of unique strings is less than k, he needs to display an empty string. Considering you are Ashish's best friend can you assist him with this challenge?

Input Format
The first line contains an integer N denoting the number of strings.
The next N lines contain strings.
The next line contains an integer k.
Output Format
The output contains the kth distinct string. If there are less than k unique string display an empty string.

Constraints
1<=N<=105
-10^8<=arr[i].length()<=10^8
Sample Testcase 0
Testcase Input
6
d
b
c
b
c
a
2
Testcase Output
a
Explanation
The only strings in arr that are distinct are "d" and "a." The letter "d" comes first, making it the first separate string.


Because "a" appears second, it is the second distinct string. "a" is returned since k == 2.

Sample Testcase 1
Testcase Input
3
dac
ba
a
1 
Testcase Output
dac
Explanation
As all the strings are unique we have the strings in the order:


1) dac


2) ba


3) a


Now, as we can see the value of k=1 therefore, the string returned is the 1st unique string = dac.










Let's walk through the thought process and improvements that led to the final solution. This will involve explaining the initial approach, the basic solution, and the optimizations we applied.

### Problem Understanding:
Ashish needs to find the kth unique string from a list of N strings, where some strings may be duplicated. If fewer than k unique strings exist, the output should be an empty string.

### Basic Solution:
The basic solution involves the following steps:
1. **Read and store all strings.**
2. **Count the frequency of each string to identify unique ones.**
3. **Determine the kth unique string from the list of unique strings.**

#### Basic Steps:
1. **Read input strings and store them in a list.**
2. **Use a hashmap to count occurrences of each string.**
3. **Filter unique strings (strings with a count of 1) and store them in a list in their original order.**
4. **Retrieve the kth unique string if it exists, else return an empty string.**

### Initial Approach:
Here's a simple initial approach to solve the problem:

1. Read all input strings into a list.
2. Use a hashmap to count the occurrences of each string.
3. Collect unique strings in a list based on their count.
4. Retrieve the kth unique string.

### Code for Initial Approach:
```java
import java.io.*;
import java.util.*;

class Solution {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        // Read the number of strings
        int N = scanner.nextInt();
        scanner.nextLine(); // consume the newline character
        
        // Use a list to store strings
        List<String> strings = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            strings.add(scanner.nextLine());
        }
        
        // Use a hashmap to count frequencies
        Map<String, Integer> frequencyMap = new HashMap<>();
        for (String str : strings) {
            frequencyMap.put(str, frequencyMap.getOrDefault(str, 0) + 1);
        }
        
        // Collect unique strings in a list
        List<String> uniqueStrings = new ArrayList<>();
        for (String str : strings) {
            if (frequencyMap.get(str) == 1) {
                uniqueStrings.add(str);
            }
        }
        
        // Read the value of k
        int k = scanner.nextInt();
        
        // Print the kth unique string if it exists
        if (k <= uniqueStrings.size()) {
            System.out.println(uniqueStrings.get(k - 1));
        } else {
            System.out.println("");
        }
        
        scanner.close();
    }
}
```

### Analysis of the Initial Approach:
- **Time Complexity:**
  - Reading input: O(N)
  - Counting frequencies: O(N)
  - Collecting unique strings: O(N)
  - Total: O(N)
- **Space Complexity:**
  - Storage for strings: O(N)
  - HashMap for counting: O(N)
  - List for unique strings: O(N)
  - Total: O(N)

### Optimized Approach:
The initial approach is already quite efficient. However, we can make a minor improvement by using a `LinkedHashMap` instead of a `HashMap`. This allows us to maintain the order of insertion while counting frequencies, eliminating the need for an additional list to store unique strings in order.

### Code for Optimized Solution:

import java.io.*;
import java.util.*;

class Solution {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        // Read the number of strings
        int N = scanner.nextInt();
        scanner.nextLine(); // consume the newline character
        
        // Use LinkedHashMap to maintain insertion order and count frequencies
        Map<String, Integer> frequencyMap = new LinkedHashMap<>();
        
        // Read the strings and count their frequencies
        for (int i = 0; i < N; i++) {
            String str = scanner.nextLine();
            frequencyMap.put(str, frequencyMap.getOrDefault(str, 0) + 1);
        }
        
        // Read the value of k
        int k = scanner.nextInt();
        
        // Iterate through the map to find the kth unique string
        int uniqueCount = 0;
        String kthUniqueString = "";
        
        for (Map.Entry<String, Integer> entry : frequencyMap.entrySet()) {
            if (entry.getValue() == 1) {
                uniqueCount++;
                if (uniqueCount == k) {
                    kthUniqueString = entry.getKey();
                    break;
                }
            }
        }
        
        // Print the result
        System.out.println(kthUniqueString);
        
        scanner.close();
    }
}
```

### Why This Solution:
1. **Efficiency:** The solution reads and processes the input in a single pass, maintaining a linear time complexity of O(N).
2. **Simplicity:** The use of a `LinkedHashMap` allows us to keep track of insertion order while counting frequencies, simplifying the logic for identifying the kth unique string.
3. **Scalability:** Handles the upper constraints efficiently, as it uses O(N) space and time, ensuring it can process up to 100,000 strings efficiently.

### Summary of Optimizations:
- **Single Pass Processing:** Both counting frequencies and maintaining order in a single pass with `LinkedHashMap`.
- **Constant Space for Unique String Retrieval:** Eliminates the need for an additional list to store unique strings, thus saving space.

### Complexity:
- **Time Complexity:** O(N) - Linear time to process and retrieve the kth unique string.
- **Space Complexity:** O(N) - Space required to store strings and their counts in a `LinkedHashMap`.
